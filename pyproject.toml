[project]
name = "karma-mcp"
version = "0.8.0"
description = "MCP server for Karma Alert Dashboard integration with Claude"
authors = [
    {name = "Karma MCP Contributors"}
]
license = "MIT"
readme = "README.md"
keywords = ["mcp", "karma", "alerts", "kubernetes", "prometheus", "claude"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
]
requires-python = ">=3.11"
dependencies = [
    "mcp[cli]>=1.2.0",
    "httpx>=0.27.0",
    "pydantic>=2.0.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-httpx>=0.30.0", 
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0",
    "httpx>=0.27.0",
]
dev = [
    # Include test dependencies
    "pytest>=7.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-httpx>=0.30.0", 
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0",
    "httpx>=0.27.0",
    # Code quality tools
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    # Type stubs
    "types-requests>=2.31.0",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "asyncio: mark test as async",
    "integration: mark test as integration test",
    "unit: mark test as unit test",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning", 
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B018", "B015", "B905"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "uvicorn.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"