name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to test with'
        required: false
        default: '3.12'
        type: choice
        options:
          - '3.11'
          - '3.12'
          - 'all'
      debug:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.12"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ${{ github.event.inputs.python-version == 'all' && fromJSON('["3.11", "3.12"]') || github.event.inputs.python-version && fromJSON(format('["{0}"]', github.event.inputs.python-version)) || fromJSON('["3.11", "3.12"]') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Debug - Show workflow inputs
        if: github.event.inputs.debug == 'true'
        run: |
          echo "## 🐛 Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Version:** ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Debug Mode:** ${{ github.event.inputs.debug }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event Name:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ref:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python ${{ matrix.python-version }}
        run: |
          uv python install ${{ matrix.python-version }}
          echo "✅ Python ${{ matrix.python-version }} installed" >> $GITHUB_STEP_SUMMARY
      
      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies..." >> $GITHUB_STEP_SUMMARY
          uv sync --all-extras --dev
          # Verify critical tools are available
          echo "🔍 Verifying tools installation..." >> $GITHUB_STEP_SUMMARY
          uv run ruff --version && echo "✅ ruff available" >> $GITHUB_STEP_SUMMARY || echo "❌ ruff missing" >> $GITHUB_STEP_SUMMARY
          uv run mypy --version && echo "✅ mypy available" >> $GITHUB_STEP_SUMMARY || echo "❌ mypy missing" >> $GITHUB_STEP_SUMMARY
          uv run pytest --version && echo "✅ pytest available" >> $GITHUB_STEP_SUMMARY || echo "❌ pytest missing" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event.inputs.debug }}" = "true" ]; then
            echo "🔍 Installed packages:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            uv pip list >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Run linting
        run: |
          echo "## 🔧 Linting Results" >> $GITHUB_STEP_SUMMARY
          
          # Try with uv run, fallback to direct installation if needed
          if ! uv run ruff --version >/dev/null 2>&1; then
            echo "⚠️ ruff not found via uv, installing directly..." >> $GITHUB_STEP_SUMMARY
            uv add --dev ruff
          fi
          
          if uv run ruff check . --output-format=github; then
            echo "✅ Ruff linting passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Ruff linting failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          if uv run ruff format --check .; then
            echo "✅ Code formatting is correct" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code formatting issues found" >> $GITHUB_STEP_SUMMARY
            echo "Run 'uv run ruff format .' to fix formatting" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      
      - name: Run type checking
        continue-on-error: true
        run: |
          echo "## 🔍 Type Checking Results" >> $GITHUB_STEP_SUMMARY
          
          # Ensure mypy is available
          if ! uv run mypy --version >/dev/null 2>&1; then
            echo "⚠️ mypy not found via uv, installing directly..." >> $GITHUB_STEP_SUMMARY
            uv add --dev mypy
          fi
          
          if uv run mypy src/ --show-error-codes --pretty; then
            echo "✅ Type checking passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Type checking issues found (non-blocking)" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.debug }}" = "true" ]; then
              echo "🔍 Full mypy output:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              uv run mypy src/ --show-error-codes --pretty >> $GITHUB_STEP_SUMMARY 2>&1 || true
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: Run unit tests
        run: |
          echo "## 🧪 Unit Test Results" >> $GITHUB_STEP_SUMMARY
          
          # Ensure pytest is available
          if ! uv run pytest --version >/dev/null 2>&1; then
            echo "⚠️ pytest not found via uv, installing directly..." >> $GITHUB_STEP_SUMMARY
            uv add --dev pytest pytest-asyncio pytest-httpx pytest-mock coverage
          fi
          
          if uv run python scripts/run_tests.py --unit --verbose; then
            echo "✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit tests failed" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.debug }}" = "true" ]; then
              echo "🔍 Debug: Listing test files:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              find tests/unit/ -name "*.py" >> $GITHUB_STEP_SUMMARY || true
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
            exit 1
          fi
      
      - name: Run integration tests
        continue-on-error: true
        run: |
          echo "## 🔗 Integration Test Results" >> $GITHUB_STEP_SUMMARY
          if uv run python scripts/run_tests.py --integration --verbose; then
            echo "✅ Integration tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Integration tests failed (non-blocking - may require live Karma instance)" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          KARMA_URL: http://localhost:8080
      
      - name: Generate coverage report
        run: |
          uv run coverage run -m pytest tests/unit/ tests/integration/
          uv run coverage xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.12'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false

  test-docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image (test)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: karma-mcp:test
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker run --rm karma-mcp:test python -c "
          import sys
          sys.path.insert(0, '/app/src')
          from karma_mcp.server import check_karma, search_alerts_by_container, get_alert_details_multi_cluster
          print('✅ All imports successful')
          print('✅ New search functions available')
          "