name: PR Review

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install 3.12
      
      - name: Install dependencies
        run: uv sync --all-extras --dev
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            src/**/*.py
            tests/**/*.py
            pyproject.toml
            docker/**/*
            helm/**/*
      
      - name: Run comprehensive checks
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "## 📋 PR Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run tests
          echo "### 🧪 Testing" >> $GITHUB_STEP_SUMMARY
          if uv run python scripts/run_tests.py --unit --quiet; then
            echo "✅ Unit tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit tests failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Check code quality
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Code Quality" >> $GITHUB_STEP_SUMMARY
          
          # Format check
          if uv run ruff format --check .; then
            echo "✅ Code formatting is correct" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code formatting issues found" >> $GITHUB_STEP_SUMMARY
            echo "Run \`uv run ruff format .\` to fix" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Lint check
          if uv run ruff check .; then
            echo "✅ No linting issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Linting issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Security check
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Security" >> $GITHUB_STEP_SUMMARY
          if uv run bandit -r src/ -q; then
            echo "✅ No security issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Security issues found - please review" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Test Docker build
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Docker Build" >> $GITHUB_STEP_SUMMARY
          
          docker build -f docker/Dockerfile -t karma-mcp:pr-test . && \
          echo "✅ Docker build successful" >> $GITHUB_STEP_SUMMARY || \
          echo "❌ Docker build failed" >> $GITHUB_STEP_SUMMARY
      
      - name: Check for new features
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # List changed files
          echo "**Changed files:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Check for new functions
          if git diff origin/main..HEAD --name-only | grep -q "\.py$"; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**New/Modified Python functions:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            git diff origin/main..HEAD --unified=0 | grep "^+.*def " | sed 's/^+//' >> $GITHUB_STEP_SUMMARY || true
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi